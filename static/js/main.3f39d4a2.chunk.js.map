{"version":3,"sources":["components/Header.tsx","components/TableView.tsx","App.tsx","index.tsx"],"names":["Header","title","className","style","margin","client","ApolloClient","cache","InMemoryCache","uri","LIST_COUNTRIES","gql","TableView","useQuery","data","loading","error","message","compareByAlph","a","b","data_source","countries","map","item","key","code","columns","dataIndex","sorter","name","capital","render","record","languages","join","filters","text","value","onFilter","indexOf","continent","dataSource","App","xs","sm","span","offset","md","ReactDOM","document","getElementById"],"mappings":"kNAgBeA,EAZU,WACvB,OACE,qCACE,cAAC,IAAD,CACEC,MAAM,8DACNC,UAAU,gBAEZ,cAAC,IAAD,CAASC,MAAO,CAAEC,OAAQ,S,+DCL1BC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,uCAGDC,EAAiBC,YAAH,qNAuJLC,EA1Ha,WAC1B,MAAiCC,YAASH,EAAgB,CACxDL,WADMS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,MAIvB,GAAID,GAAWC,EACb,OAAO,4BAAIA,EAAQA,EAAMC,QAAU,eAGrC,IAAMC,EAAgB,SAACC,EAAWC,GAChC,OAAID,EAAIC,EAAU,EACdD,EAAIC,GAAW,EACZ,GAGLC,EAAqCP,EAAKQ,UAAUC,KACtD,SAACC,GAAD,mBAAC,eAA+BA,GAAhC,IAAsCC,IAAKD,EAAKE,UAG5CC,EAAU,CACd,CACE1B,MAAO,OACP2B,UAAW,OACXH,IAAK,OACLI,OAAQ,SAACV,EAAaC,GAAd,OAA8BF,EAAcC,EAAEO,KAAMN,EAAEM,QAEhE,CACEzB,MAAO,OACP2B,UAAW,OACXH,IAAK,OACLI,OAAQ,SAACV,EAAaC,GAAd,OAA8BF,EAAcC,EAAEW,KAAMV,EAAEU,QAEhE,CACE7B,MAAO,UACP2B,UAAW,UACXH,IAAK,UACLI,OAAQ,SAACV,EAAaC,GAAd,OAA8BF,EAAcC,EAAEY,QAASX,EAAEW,WAEnE,CACE9B,MAAO,YACP+B,OAAQ,SAACC,GAAD,OACNA,EAAOC,UAAUX,KAAI,SAACC,GAAD,OAAUA,EAAKM,QAAMK,KAAK,OACjDV,IAAK,YACLW,QAAS,CACP,CACEC,KAAM,UACNC,MAAO,WAET,CACED,KAAM,SACNC,MAAO,UAET,CACED,KAAM,UACNC,MAAO,WAET,CACED,KAAM,SACNC,MAAO,UAET,CACED,KAAM,aACNC,MAAO,cAET,CACED,KAAM,UACNC,MAAO,YAGXC,SAAU,SAACD,EAAYL,GAAb,OACqD,IAA7DA,EAAOC,UAAUX,KAAI,SAACC,GAAD,OAAUA,EAAKM,QAAMU,QAAQF,KAEtD,CACErC,MAAO,YACP+B,OAAQ,SAACC,GAAD,OAAoCA,EAAOQ,UAAUX,MAC7DL,IAAK,YACLW,QAAS,CACP,CACEC,KAAM,SACNC,MAAO,UAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,SACNC,MAAO,UAET,CACED,KAAM,gBACNC,MAAO,iBAET,CACED,KAAM,gBACNC,MAAO,iBAET,CACED,KAAM,UACNC,MAAO,WAET,CACED,KAAM,aACNC,MAAO,eAGXC,SAAU,SAACD,EAAYL,GAAb,OACiC,IAAzCA,EAAOQ,UAAUX,KAAKU,QAAQF,MAIpC,OACE,mCACE,cAAC,IAAD,CACEX,QAASA,EACTe,WAAYrB,EACZnB,UAAU,a,kBC1IHyC,EAbO,WACpB,OACE,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAKC,GAAI,CAAEF,KAAM,GAAIC,OAAQ,GAAlE,SACE,cAAC,EAAD,Y,OCNVE,IAASjB,OACP,cAAC,EAAD,IACAkB,SAASC,eAAe,W","file":"static/js/main.3f39d4a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { PageHeader, Divider } from \"antd\";\r\nimport \"./components.css\";\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title=\"Table-View of Countries using React, TypeScript, AntDesign \"\r\n        className=\"header_page\"\r\n      />\r\n      <Divider style={{ margin: 0 }} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql, useQuery } from \"@apollo/client\";\r\nimport { Table } from \"antd\";\r\nimport \"./components.css\";\r\n\r\n// initialize a GraphQL client\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  uri: \"https://countries.trevorblades.com\",\r\n});\r\n\r\nconst LIST_COUNTRIES = gql`\r\n  {\r\n    countries {\r\n      code\r\n      name\r\n      capital\r\n      languages {\r\n        name\r\n        code\r\n      }\r\n      continent {\r\n        name\r\n        code\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface ICountry {\r\n  name: string;\r\n  code: string;\r\n  capital: string;\r\n}\r\n\r\ninterface ICountriesinfo extends ICountry {\r\n  languages: Array<ICountry>;\r\n  continent: ICountry;\r\n}\r\n\r\nconst TableView: React.FC = () => {\r\n  const { data, loading, error } = useQuery(LIST_COUNTRIES, {\r\n    client,\r\n  });\r\n\r\n  if (loading || error) {\r\n    return <p>{error ? error.message : \"Loading...\"}</p>;\r\n  }\r\n\r\n  const compareByAlph = (a: string, b: string) => {\r\n    if (a > b) return 1;\r\n    if (a < b) return -1;\r\n    return 0;\r\n  };\r\n\r\n  let data_source: Array<ICountriesinfo> = data.countries.map(\r\n    (item: ICountriesinfo) => ({ ...item, key: item.code })\r\n  );\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Code\",\r\n      dataIndex: \"code\",\r\n      key: \"code\",\r\n      sorter: (a: ICountry, b: ICountry) => compareByAlph(a.code, b.code),\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      sorter: (a: ICountry, b: ICountry) => compareByAlph(a.name, b.name),\r\n    },\r\n    {\r\n      title: \"Capital\",\r\n      dataIndex: \"capital\",\r\n      key: \"capital\",\r\n      sorter: (a: ICountry, b: ICountry) => compareByAlph(a.capital, b.capital),\r\n    },\r\n    {\r\n      title: \"Languages\",\r\n      render: (record: ICountriesinfo): string =>\r\n        record.languages.map((item) => item.name).join(\", \"),\r\n      key: \"languages\",\r\n      filters: [\r\n        {\r\n          text: \"English\",\r\n          value: \"English\",\r\n        },\r\n        {\r\n          text: \"French\",\r\n          value: \"French\",\r\n        },\r\n        {\r\n          text: \"Spanish\",\r\n          value: \"Spanish\",\r\n        },\r\n        {\r\n          text: \"Arabic\",\r\n          value: \"Arabic\",\r\n        },\r\n        {\r\n          text: \"Portuguese\",\r\n          value: \"Portuguese\",\r\n        },\r\n        {\r\n          text: \"Russian\",\r\n          value: \"Russian\",\r\n        },\r\n      ],\r\n      onFilter: (value: any, record: ICountriesinfo) =>\r\n        record.languages.map((item) => item.name).indexOf(value) === 0,\r\n    },\r\n    {\r\n      title: \"Continent\",\r\n      render: (record: ICountriesinfo): string => record.continent.name,\r\n      key: \"continent\",\r\n      filters: [\r\n        {\r\n          text: \"Europe\",\r\n          value: \"Europe\",\r\n        },\r\n        {\r\n          text: \"Asia\",\r\n          value: \"Asia\",\r\n        },\r\n        {\r\n          text: \"Africa\",\r\n          value: \"Africa\",\r\n        },\r\n        {\r\n          text: \"North America\",\r\n          value: \"North America\",\r\n        },\r\n        {\r\n          text: \"South America\",\r\n          value: \"South America\",\r\n        },\r\n        {\r\n          text: \"Oceania\",\r\n          value: \"Oceania\",\r\n        },\r\n        {\r\n          text: \"Antarctica\",\r\n          value: \"Antarctica\",\r\n        },\r\n      ],\r\n      onFilter: (value: any, record: ICountriesinfo) =>\r\n        record.continent.name.indexOf(value) === 0,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Table<ICountriesinfo>\r\n        columns={columns}\r\n        dataSource={data_source}\r\n        className=\"table\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TableView;\r\n","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport TableView from \"./components/TableView\";\r\nimport { Row, Col } from \"antd\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Row>\r\n        <Col xs={24} sm={{ span: 16, offset: 4 }} md={{ span: 18, offset: 3 }}>\r\n          <TableView />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css'; \r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}